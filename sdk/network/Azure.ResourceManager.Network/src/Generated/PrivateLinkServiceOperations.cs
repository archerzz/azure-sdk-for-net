// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class representing the operations that can be performed over a specific PrivateLinkService. </summary>
    public partial class PrivateLinkServiceOperations : ResourceOperationsBase<ResourceGroupResourceIdentifier, PrivateLinkService>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private PrivateLinkServicesRestOperations _restClient { get; }

        /// <summary> Initializes a new instance of the <see cref="PrivateLinkServiceOperations"/> class for mocking. </summary>
        protected PrivateLinkServiceOperations()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateLinkServiceOperations"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        protected internal PrivateLinkServiceOperations(OperationsBase options, ResourceGroupResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new PrivateLinkServicesRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Network/privateLinkServices";
        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <inheritdoc />
        public async override Task<Response<PrivateLinkService>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, null, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PrivateLinkService(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <inheritdoc />
        public override Response<PrivateLinkService> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.Get");
            scope.Start();
            try
            {
                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, null, cancellationToken);
                return Response.FromValue(new PrivateLinkService(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified private link service by resource group. </summary>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PrivateLinkService>> GetAsync(string expand, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, expand, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PrivateLinkService(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified private link service by resource group. </summary>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PrivateLinkService> Get(string expand, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.Get");
            scope.Start();
            try
            {
                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, expand, cancellationToken);
                return Response.FromValue(new PrivateLinkService(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async Task<IEnumerable<Location>> ListAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public IEnumerable<Location> ListAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Deletes the specified private link service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.Delete");
            scope.Start();
            try
            {
                var operation = await StartDeleteAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified private link service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Delete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.Delete");
            scope.Start();
            try
            {
                var operation = StartDelete(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified private link service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<PrivateLinkServicesDeleteOperation> StartDeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartDelete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new PrivateLinkServicesDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified private link service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public PrivateLinkServicesDeleteOperation StartDelete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartDelete");
            scope.Start();
            try
            {
                var response = _restClient.Delete(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new PrivateLinkServicesDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
        /// <summary> Get the specific private end point connection by specific private link service in the resource group. </summary>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PrivateEndpointConnection>> GetPrivateEndpointConnectionAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.GetPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await _restClient.GetPrivateEndpointConnectionAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, expand, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specific private end point connection by specific private link service in the resource group. </summary>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateEndpointConnection> GetPrivateEndpointConnection(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.GetPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = _restClient.GetPrivateEndpointConnection(Id.ResourceGroupName, Id.Parent.Name, Id.Name, expand, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete private end point connection for a private link service in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeletePrivateEndpointConnectionAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.DeletePrivateEndpointConnection");
            scope.Start();
            try
            {
                var operation = await StartDeletePrivateEndpointConnectionAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete private end point connection for a private link service in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeletePrivateEndpointConnection(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.DeletePrivateEndpointConnection");
            scope.Start();
            try
            {
                var operation = StartDeletePrivateEndpointConnection(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete private end point connection for a private link service in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<PrivateLinkServicesDeletePrivateEndpointConnectionOperation> StartDeletePrivateEndpointConnectionAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartDeletePrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await _restClient.DeletePrivateEndpointConnectionAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return new PrivateLinkServicesDeletePrivateEndpointConnectionOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeletePrivateEndpointConnectionRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete private end point connection for a private link service in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public PrivateLinkServicesDeletePrivateEndpointConnectionOperation StartDeletePrivateEndpointConnection(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartDeletePrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = _restClient.DeletePrivateEndpointConnection(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return new PrivateLinkServicesDeletePrivateEndpointConnectionOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeletePrivateEndpointConnectionRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PrivateLinkServiceVisibility>> CheckPrivateLinkServiceVisibilityAsync(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.CheckPrivateLinkServiceVisibility");
            scope.Start();
            try
            {
                var operation = await StartCheckPrivateLinkServiceVisibilityAsync(privateLinkServiceAlias, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PrivateLinkServiceVisibility> CheckPrivateLinkServiceVisibility(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.CheckPrivateLinkServiceVisibility");
            scope.Start();
            try
            {
                var operation = StartCheckPrivateLinkServiceVisibility(privateLinkServiceAlias, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation> StartCheckPrivateLinkServiceVisibilityAsync(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartCheckPrivateLinkServiceVisibility");
            scope.Start();
            try
            {
                var response = await _restClient.CheckPrivateLinkServiceVisibilityAsync(Id.Name, privateLinkServiceAlias, cancellationToken).ConfigureAwait(false);
                return new PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation(_clientDiagnostics, Pipeline, _restClient.CreateCheckPrivateLinkServiceVisibilityRequest(Id.Name, privateLinkServiceAlias).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation StartCheckPrivateLinkServiceVisibility(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartCheckPrivateLinkServiceVisibility");
            scope.Start();
            try
            {
                var response = _restClient.CheckPrivateLinkServiceVisibility(Id.Name, privateLinkServiceAlias, cancellationToken);
                return new PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation(_clientDiagnostics, Pipeline, _restClient.CreateCheckPrivateLinkServiceVisibilityRequest(Id.Name, privateLinkServiceAlias).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PrivateLinkServiceVisibility>> CheckPrivateLinkServiceVisibilityByResourceGroupAsync(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.CheckPrivateLinkServiceVisibilityByResourceGroup");
            scope.Start();
            try
            {
                var operation = await StartCheckPrivateLinkServiceVisibilityByResourceGroupAsync(privateLinkServiceAlias, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PrivateLinkServiceVisibility> CheckPrivateLinkServiceVisibilityByResourceGroup(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.CheckPrivateLinkServiceVisibilityByResourceGroup");
            scope.Start();
            try
            {
                var operation = StartCheckPrivateLinkServiceVisibilityByResourceGroup(privateLinkServiceAlias, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation> StartCheckPrivateLinkServiceVisibilityByResourceGroupAsync(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartCheckPrivateLinkServiceVisibilityByResourceGroup");
            scope.Start();
            try
            {
                var response = await _restClient.CheckPrivateLinkServiceVisibilityByResourceGroupAsync(Id.Name, Id.ResourceGroupName, privateLinkServiceAlias, cancellationToken).ConfigureAwait(false);
                return new PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateCheckPrivateLinkServiceVisibilityByResourceGroupRequest(Id.Name, Id.ResourceGroupName, privateLinkServiceAlias).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="privateLinkServiceAlias"> The alias of the private link service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation StartCheckPrivateLinkServiceVisibilityByResourceGroup(string privateLinkServiceAlias = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateLinkServiceOperations.StartCheckPrivateLinkServiceVisibilityByResourceGroup");
            scope.Start();
            try
            {
                var response = _restClient.CheckPrivateLinkServiceVisibilityByResourceGroup(Id.Name, Id.ResourceGroupName, privateLinkServiceAlias, cancellationToken);
                return new PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation(_clientDiagnostics, Pipeline, _restClient.CreateCheckPrivateLinkServiceVisibilityByResourceGroupRequest(Id.Name, Id.ResourceGroupName, privateLinkServiceAlias).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
