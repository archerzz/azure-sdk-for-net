// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class representing the operations that can be performed over a specific BastionHost. </summary>
    public partial class BastionHostOperations : ResourceOperationsBase<ResourceGroupResourceIdentifier, BastionHost>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private BastionHostsRestOperations _restClient { get; }

        /// <summary> Initializes a new instance of the <see cref="BastionHostOperations"/> class for mocking. </summary>
        protected BastionHostOperations()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BastionHostOperations"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        protected internal BastionHostOperations(OperationsBase options, ResourceGroupResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new BastionHostsRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Network/bastionHosts";
        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <inheritdoc />
        public async override Task<Response<BastionHost>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new BastionHost(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <inheritdoc />
        public override Response<BastionHost> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.Get");
            scope.Start();
            try
            {
                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new BastionHost(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async Task<IEnumerable<Location>> ListAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public IEnumerable<Location> ListAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Deletes the specified Bastion Host. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.Delete");
            scope.Start();
            try
            {
                var operation = await StartDeleteAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified Bastion Host. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Delete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.Delete");
            scope.Start();
            try
            {
                var operation = StartDelete(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified Bastion Host. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<BastionHostsDeleteOperation> StartDeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartDelete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new BastionHostsDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified Bastion Host. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public BastionHostsDeleteOperation StartDelete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartDelete");
            scope.Start();
            try
            {
                var response = _restClient.Delete(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new BastionHostsDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<Response<AsyncPageable<BastionShareableLink>>> CreateShareableLinksAsync(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.CreateShareableLinks");
        //    scope.Start();
        //    try
        //    {
        //        var operation = await StartCreateShareableLinksAsync(vms, cancellationToken).ConfigureAwait(false);
        //        return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public Response<AsyncPageable<BastionShareableLink>> CreateShareableLinks(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.CreateShareableLinks");
        //    scope.Start();
        //    try
        //    {
        //        var operation = StartCreateShareableLinks(vms, cancellationToken);
        //        return operation.WaitForCompletion(cancellationToken);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<BastionHostsCreateShareableLinksOperation> StartCreateShareableLinksAsync(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartCreateShareableLinks");
        //    scope.Start();
        //    try
        //    {
        //        var response = await _restClient.CreateShareableLinksAsync(Id.ResourceGroupName, Id.Name, vms, cancellationToken).ConfigureAwait(false);
        //        return new BastionHostsCreateShareableLinksOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateShareableLinksRequest(Id.ResourceGroupName, Id.Name, vms).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public BastionHostsCreateShareableLinksOperation StartCreateShareableLinks(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartCreateShareableLinks");
        //    scope.Start();
        //    try
        //    {
        //        var response = _restClient.CreateShareableLinks(Id.ResourceGroupName, Id.Name, vms, cancellationToken);
        //        return new BastionHostsCreateShareableLinksOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateShareableLinksRequest(Id.ResourceGroupName, Id.Name, vms).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        /// <summary> Deletes the Bastion Shareable Links for all the VMs specified in the request. </summary>
        /// <param name="vms"> List of VM references. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteShareableLinksAsync(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.DeleteShareableLinks");
            scope.Start();
            try
            {
                var operation = await StartDeleteShareableLinksAsync(vms, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the Bastion Shareable Links for all the VMs specified in the request. </summary>
        /// <param name="vms"> List of VM references. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteShareableLinks(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.DeleteShareableLinks");
            scope.Start();
            try
            {
                var operation = StartDeleteShareableLinks(vms, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the Bastion Shareable Links for all the VMs specified in the request. </summary>
        /// <param name="vms"> List of VM references. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<BastionHostsDeleteShareableLinksOperation> StartDeleteShareableLinksAsync(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartDeleteShareableLinks");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteShareableLinksAsync(Id.ResourceGroupName, Id.Name, vms, cancellationToken).ConfigureAwait(false);
                return new BastionHostsDeleteShareableLinksOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteShareableLinksRequest(Id.ResourceGroupName, Id.Name, vms).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the Bastion Shareable Links for all the VMs specified in the request. </summary>
        /// <param name="vms"> List of VM references. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public BastionHostsDeleteShareableLinksOperation StartDeleteShareableLinks(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartDeleteShareableLinks");
            scope.Start();
            try
            {
                var response = _restClient.DeleteShareableLinks(Id.ResourceGroupName, Id.Name, vms, cancellationToken);
                return new BastionHostsDeleteShareableLinksOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteShareableLinksRequest(Id.ResourceGroupName, Id.Name, vms).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<Response<AsyncPageable<BastionActiveSession>>> GetActiveSessionsAsync(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.GetActiveSessions");
        //    scope.Start();
        //    try
        //    {
        //        var operation = await StartGetActiveSessionsAsync(cancellationToken).ConfigureAwait(false);
        //        return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public Response<AsyncPageable<BastionActiveSession>> GetActiveSessions(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.GetActiveSessions");
        //    scope.Start();
        //    try
        //    {
        //        var operation = StartGetActiveSessions(cancellationToken);
        //        return operation.WaitForCompletion(cancellationToken);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<BastionHostsGetActiveSessionsOperation> StartGetActiveSessionsAsync(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartGetActiveSessions");
        //    scope.Start();
        //    try
        //    {
        //        var response = await _restClient.GetActiveSessionsAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
        //        return new BastionHostsGetActiveSessionsOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetActiveSessionsRequest(Id.ResourceGroupName, Id.Name).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public BastionHostsGetActiveSessionsOperation StartGetActiveSessions(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartGetActiveSessions");
        //    scope.Start();
        //    try
        //    {
        //        var response = _restClient.GetActiveSessions(Id.ResourceGroupName, Id.Name, cancellationToken);
        //        return new BastionHostsGetActiveSessionsOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetActiveSessionsRequest(Id.ResourceGroupName, Id.Name).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<Response<AsyncPageable<BastionShareableLink>>> CreateShareableLinksNextPageAsync(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.CreateShareableLinksNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var operation = await StartCreateShareableLinksNextPageAsync(vms, cancellationToken).ConfigureAwait(false);
        //        return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public Response<AsyncPageable<BastionShareableLink>> CreateShareableLinksNextPage(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.CreateShareableLinksNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var operation = StartCreateShareableLinksNextPage(vms, cancellationToken);
        //        return operation.WaitForCompletion(cancellationToken);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<BastionHostsCreateShareableLinksOperation> StartCreateShareableLinksNextPageAsync(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartCreateShareableLinksNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var response = await _restClient.CreateShareableLinksNextPageAsync(Id.ResourceGroupName, Id.Name, vms, cancellationToken).ConfigureAwait(false);
        //        return new BastionHostsCreateShareableLinksOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateShareableLinksNextPageRequest(Id.ResourceGroupName, Id.Name, vms).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Creates a Bastion Shareable Links for all the VMs specified in the request. </summary>
        ///// <param name="vms"> List of VM references. </param>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public BastionHostsCreateShareableLinksOperation StartCreateShareableLinksNextPage(IEnumerable<BastionShareableLink> vms = null, CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartCreateShareableLinksNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var response = _restClient.CreateShareableLinksNextPage(Id.ResourceGroupName, Id.Name, vms, cancellationToken);
        //        return new BastionHostsCreateShareableLinksOperation(_clientDiagnostics, Pipeline, _restClient.CreateCreateShareableLinksNextPageRequest(Id.ResourceGroupName, Id.Name, vms).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<Response<AsyncPageable<BastionActiveSession>>> GetActiveSessionsNextPageAsync(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.GetActiveSessionsNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var operation = await StartGetActiveSessionsNextPageAsync(cancellationToken).ConfigureAwait(false);
        //        return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public Response<AsyncPageable<BastionActiveSession>> GetActiveSessionsNextPage(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.GetActiveSessionsNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var operation = StartGetActiveSessionsNextPage(cancellationToken);
        //        return operation.WaitForCompletion(cancellationToken);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public async Task<BastionHostsGetActiveSessionsOperation> StartGetActiveSessionsNextPageAsync(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartGetActiveSessionsNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var response = await _restClient.GetActiveSessionsNextPageAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
        //        return new BastionHostsGetActiveSessionsOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetActiveSessionsNextPageRequest(Id.ResourceGroupName, Id.Name).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}

        ///// <summary> Returns the list of currently active sessions on the Bastion. </summary>
        ///// <param name="cancellationToken"> The cancellation token to use. </param>
        //public BastionHostsGetActiveSessionsOperation StartGetActiveSessionsNextPage(CancellationToken cancellationToken = default)
        //{
        //    using var scope = _clientDiagnostics.CreateScope("BastionHostOperations.StartGetActiveSessionsNextPage");
        //    scope.Start();
        //    try
        //    {
        //        var response = _restClient.GetActiveSessionsNextPage(Id.ResourceGroupName, Id.Name, cancellationToken);
        //        return new BastionHostsGetActiveSessionsOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetActiveSessionsNextPageRequest(Id.ResourceGroupName, Id.Name).Request, response);
        //    }
        //    catch (Exception e)
        //    {
        //        scope.Failed(e);
        //        throw;
        //    }
        //}
    }
}
